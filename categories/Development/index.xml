<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on DebugTalk</title><link>https://debugtalk.com/categories/Development/</link><description>Recent content in Development on DebugTalk</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 05 Aug 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://debugtalk.com/categories/Development/index.xml" rel="self" type="application/rss+xml"/><item><title>How to install a package from Github that has other github dependencies ?</title><link>https://debugtalk.com/post/How-to-install-a-package-from-Github-that-has-other-github-dependencies/</link><pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate><guid>https://debugtalk.com/post/How-to-install-a-package-from-Github-that-has-other-github-dependencies/</guid><description>最近在开发ApiTestEngine时遇到一个安装包依赖的问题，耗费了不少时间寻找解决方案，考虑到还算比较有普遍性，因此总结形成这篇文章。 从</description></item><item><title>解决 Jenkins 中无法展示 HTML 样式的问题</title><link>https://debugtalk.com/post/solve-Jenkins-can-not-show-html-css/</link><pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate><guid>https://debugtalk.com/post/solve-Jenkins-can-not-show-html-css/</guid><description>问题描述 对于测试报告来说，除了内容的简洁精炼，样式的美观也很重要。常用的做法是，采用HTML格式的文档，并搭配CSS和JS，实现自定义的样式</description></item><item><title>使用 pyenv 管理多个 Python 版本依赖环境</title><link>https://debugtalk.com/post/use-pyenv-manage-multiple-python-virtualenvs/</link><pubDate>Sat, 25 Mar 2017 00:00:00 +0000</pubDate><guid>https://debugtalk.com/post/use-pyenv-manage-multiple-python-virtualenvs/</guid><description>背景 从接触Python以来，一直都是采用virtualenv和virtualenvwrapper来管理不同项目的依赖环境，通过workon、</description></item><item><title>【GIT技巧】清除历史提交记录中的敏感信息</title><link>https://debugtalk.com/post/clean-sensitive-data-from-git-history-commits/</link><pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate><guid>https://debugtalk.com/post/clean-sensitive-data-from-git-history-commits/</guid><description>背景介绍 在使用GitHub的过程中，假如某次提交代码时不小心将密码或SSH-key提交进了公共仓库。当然，希望这种事情永远也不会发生，但是如</description></item><item><title>如何优雅地一键实现 macOS 网络代理切换</title><link>https://debugtalk.com/post/switch-macOS-web-proxy-in-elegant-way/</link><pubDate>Thu, 24 Nov 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.com/post/switch-macOS-web-proxy-in-elegant-way/</guid><description>在macOS中配置Web代理时，通常的做法是在控制面板中进行操作，System Preferences -&amp;gt; Network -&amp;gt; Advanced -&amp;gt; Proxies. 这种配置方式虽然可以实现需求，但缺点在于操作比较</description></item><item><title>Jenkins 的输出日志也可以变得色色的</title><link>https://debugtalk.com/post/make-Jenkins-Console-Output-Colorful/</link><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.com/post/make-Jenkins-Console-Output-Colorful/</guid><description>在《使用Jenkins实现持续集成构建检查》一文中，写到了这么一段话： 在这里，我们还可以通过&amp;ndash;disable_output_co</description></item><item><title>使用 Jenkins 实现持续集成构建检查</title><link>https://debugtalk.com/post/Jenkins-CI-Automation-Test/</link><pubDate>Sun, 14 Aug 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.com/post/Jenkins-CI-Automation-Test/</guid><description>通过《使用Jenkins搭建iOS/Android持续集成打包平台》和《关于持续集成打包平台的Jenkins配置和构建脚本实现细节》两篇文章</description></item><item><title>关于持续集成打包平台的 Jenkins 配置和构建脚本实现细节</title><link>https://debugtalk.com/post/iOS-Android-Packing-with-Jenkins-details/</link><pubDate>Tue, 26 Jul 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.com/post/iOS-Android-Packing-with-Jenkins-details/</guid><description>在《使用Jenkins搭建iOS/Android持续集成打包平台》一文中，我对如何使用Jenkins搭建iOS/Android持续集成打包平</description></item><item><title>使用 Jenkins 搭建 iOS/Android 持续集成打包平台</title><link>https://debugtalk.com/post/iOS-Android-Packing-with-Jenkins/</link><pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.com/post/iOS-Android-Packing-with-Jenkins/</guid><description>背景描述 根据项目需求，现要在团队内部搭建一个统一的打包平台，实现对iOS和Android项目的打包。而且为了方便团队内部的测试包分发，希望在</description></item><item><title>深入浅出 Git 权限校验</title><link>https://debugtalk.com/post/head-first-git-authority-verification/</link><pubDate>Wed, 15 Jun 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.com/post/head-first-git-authority-verification/</guid><description>借助上次“掉坑”的经历，我对Git权限校验的两种方式重头进行了梳理，形成了这篇总结记录。 在本地计算机与GitHub（或GitLab）进行通信</description></item></channel></rss>