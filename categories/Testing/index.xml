<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing on DebugTalk</title><link>https://debugtalk.github.io/categories/Testing/</link><description>Recent content in Testing on DebugTalk</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 28 May 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://debugtalk.github.io/categories/Testing/index.xml" rel="self" type="application/rss+xml"/><item><title>使用爬虫技术实现 Web 页面资源可用性检测</title><link>https://debugtalk.github.io/post/requests-crawler/</link><pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate><guid>https://debugtalk.github.io/post/requests-crawler/</guid><description>背景 对于电商类型和内容服务类型的网站，经常会出现因为配置错误造成页面链接无法访问的情况（404）。 显然，要确保网站中的所有链接都具有可访问性</description></item><item><title>深入浅出开源性能测试工具 Locust（使用篇）</title><link>https://debugtalk.github.io/post/head-first-locust-user-guide/</link><pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate><guid>https://debugtalk.github.io/post/head-first-locust-user-guide/</guid><description>在《【LocustPlus序】漫谈服务端性能测试》中，我对服务端性能测试的基础概念和性能测试工具的基本原理进行了介绍，并且重点推荐了Locu</description></item><item><title>深入浅出开源性能测试工具 Locust（脚本增强）</title><link>https://debugtalk.github.io/post/head-first-locust-advanced-script/</link><pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate><guid>https://debugtalk.github.io/post/head-first-locust-advanced-script/</guid><description>在《深入浅出开源性能测试工具Locust（使用篇）》一文中，罗列了编写性能测试脚本时常用的几类脚本增强的场景，本文是对应的代码示例。 关联 在某</description></item><item><title>漫谈服务端性能测试</title><link>https://debugtalk.github.io/post/locustplus-talk-about-performance-test/</link><pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.github.io/post/locustplus-talk-about-performance-test/</guid><description>最近因为工作原因，我又拾起了老本行，开始做Web性能测试。之前虽然做过三四年的性能测试，但是在博客和开源项目方面都没有什么输出，一直是一个很</description></item><item><title>关于促销活动页面测试的那些事儿</title><link>https://debugtalk.github.io/post/promotion-page-test/</link><pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.github.io/post/promotion-page-test/</guid><description>这篇文章来说说促销活动页面测试的那些事儿。 什么是促销活动页面？ 通常电商平台在节假日会做一些促销活动，而活动的宣传方式，主要会采用H5静态页面</description></item><item><title>Android App持续集成性能测试：启动流量（1）</title><link>https://debugtalk.github.io/post/Android-performance-test-start-traffic-uid-stat/</link><pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.github.io/post/Android-performance-test-start-traffic-uid-stat/</guid><description>本文对Android App的启动流量测试进行介绍。这里的启动流量指的是网络流量，即App在启动时发起网络请求和接收网络响应时传输的网络数据量</description></item><item><title>Android App持续集成性能测试：启动流量（2）</title><link>https://debugtalk.github.io/post/Android-performance-test-start-traffic-tcpdump-wireshark/</link><pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.github.io/post/Android-performance-test-start-traffic-tcpdump-wireshark/</guid><description>在上一篇文章中，介绍了一种测试Android App启动流量的方法。当时也提到了，通过读取/proc/uid_stat/&amp;lt;UID&amp;gt;</description></item><item><title>对 Android 设备 CPU 进行锁频</title><link>https://debugtalk.github.io/post/Android-CPU-lock-frequency/</link><pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.github.io/post/Android-CPU-lock-frequency/</guid><description>本文对Android设备CPU的状态查看方法和锁频（lock frequency）方法进行详细介绍。这有什么用？作为测试工程师，你值得了解。 C</description></item><item><title>Android App持续集成性能测试：使用Python实现UI自动化</title><link>https://debugtalk.github.io/post/Android-performance-test-UI-Automation-with-Python/</link><pubDate>Sun, 17 Apr 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.github.io/post/Android-performance-test-UI-Automation-with-Python/</guid><description>在进行Android App持续集成性能测试的时候，需要自动化实现UI层面的一些操作，常见的几种场景包括： 测试帧率时，需要模拟滑屏、拖拽操作；</description></item><item><title>微信朋友圈投票活动的刷票案例分析</title><link>https://debugtalk.github.io/post/cheat-in-wechat-moments-voting-activity/</link><pubDate>Mon, 04 Apr 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.github.io/post/cheat-in-wechat-moments-voting-activity/</guid><description>现阶段，在微信朋友圈举办的投票活动层出不穷，相信已经有不少同学对此不胜其烦，因为总会时不时地冒出个人（亲戚、朋友、or whatever）来请</description></item></channel></rss>