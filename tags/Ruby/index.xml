<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ruby on DebugTalk</title><link>https://debugtalk.com/tags/Ruby/</link><description>Recent content in Ruby on DebugTalk</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 28 Jul 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://debugtalk.com/tags/Ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>从0到1搭建移动App功能自动化测试平台 (4)：自动化测试代码⎡工程化⎦</title><link>https://debugtalk.com/post/build-app-automated-test-platform-from-0-to-1-refactor-testcase-scripts/</link><pubDate>Thu, 28 Jul 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.com/post/build-app-automated-test-platform-from-0-to-1-refactor-testcase-scripts/</guid><description>在本系列的上一篇文章中，我通过系统登录这一典型功能点，演示了编写自动化测试脚本的整个流程，并对测试脚本进行了初步优化。 在本文中，我将重点介绍</description></item><item><title>从0到1搭建移动App功能自动化测试平台（3）：编写iOS自动化测试脚本</title><link>https://debugtalk.com/post/build-app-automated-test-platform-from-0-to-1-write-iOS-testcase-scripts/</link><pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.com/post/build-app-automated-test-platform-from-0-to-1-write-iOS-testcase-scripts/</guid><description>通过前面三篇文章，我们已经将iOS自动化功能测试的开发环境全部准备就绪，也学习了iOS UI控件交互操作的一般性方法，接下来，就可以开始编写自</description></item><item><title>从0到1搭建移动App功能自动化测试平台（2）：操作iOS应用的控件</title><link>https://debugtalk.com/post/build-app-automated-test-platform-from-0-to-1-Appium-interrogate-iOS-UI/</link><pubDate>Sun, 29 May 2016 00:00:00 +0000</pubDate><guid>https://debugtalk.com/post/build-app-automated-test-platform-from-0-to-1-Appium-interrogate-iOS-UI/</guid><description>写在前面 前两天微信突然发来一条系统消息，提示DebugTalk可以开通原创标识了（同时也有了评论功能），虽然一直在期待，但没想到来得这么快，</description></item></channel></rss>